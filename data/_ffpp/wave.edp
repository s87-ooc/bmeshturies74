/*************************************************************

 Projet

 (C) 2013 Charles Podkanski (charles@podkanski.com),
          Stjepan Stamenkovic (stjepan@stjepan.net)

 ---

     Fichier: wave.edp

 Description: vérification de la implémentation en utilisant FreeFem++

**************************************************************/

bool debug=true;

// ---

// problem parameters

real kappa = 10.;
real kx = 1. / sqrt(2.);
real ky = 1. / sqrt(2.);

real T = 2.25;
real dt = 0.05;
real nSteps = T / dt;

// ---

// defining the boundary
border C(t=0, 2*pi) {x=cos(t); y=sin(t);}

// ---

int grid = 50;

// domain is on the left side when following the boundary according to parametrization
mesh Th = buildmesh(C(grid));
savemesh(Th, "cercle_ffpp.msh");

// space over Th with P1 elements
fespace Vh(Th, P1);

// initial values
Vh u0 = exp(-1. * ((x - 0.1)^2 + (y - 0.1)^2) / 0.01);
Vh u1 = 0.;

// ---

// TODO: assemble these matrices more efficiently

varf funcA(u,v) = int2d(Th)(dx(u)*dx(v) + dy(u)*dy(v));
matrix A = funcA(Vh, Vh);

varf funcB(u, v) = int1d(Th, 1)(u*v);
matrix B = funcB(Vh, Vh);

// uMatU = (M - (A + B)dt^2/2)
varf funcUmatU(u,v) = int2d(Th)(u*v)
						- int2d(Th)(dt^2/2 * (dx(u)*dx(v) + dy(u)*dy(v)))
						- int1d(Th, 1)(dt^2/2 * u*v);
matrix uMatU = funcUmatU(Vh, Vh);

varf funcVmatU(u,v) = int2d(Th)(dt * u*v);
matrix vMatU = funcVmatU(Vh, Vh);

varf funcUmatV(u,v) = - int2d(Th)(dt/2 * (dx(u)*dx(v) + dy(u)*dy(v)))
						- int1d(Th, 1)(dt/2 * u*v);
matrix uMatV = funcUmatV(Vh, Vh);

varf funcM(u,v) = int2d(Th)(u*v);
matrix vMatV = funcM(Vh, Vh);

if (debug)
{
	{
		ofstream fout("ffppA.txt");
		fout << A;
	}
	
	{
		ofstream fout("ffppB.txt");
		fout << B;
	}

	{
		ofstream fout("uMatU.txt");
		fout << uMatU;
	}
	
	{
		ofstream fout("vMatU.txt");
		fout << vMatU;
	}
	
	{
		ofstream fout("uMatV.txt");
		fout << uMatV;
	}
	
	{
		ofstream fout("vMatV.txt");
		fout << vMatV;
	}
}

// ---

// setup initial values

real[int] u = u0[];
real[int] v = u1[];

// iterate according to Newmark

real cpu = clock();

real[int] uLast = u;
real[int] vLast = v;

Vh visU;
visU[] = u;
// save the solution for Gnuplot
	{
		ofstream ff("graph.txt");
		for (int i=0;i<Th.nt;i++)
		{
			for (int j=0; j <3; j++)
			{
				ff<<Th[i][j].x << " "<< Th[i][j].y<< " "<<visU[][Vh(i,j)]<<endl;
			}
			ff<<Th[i][0].x << " "<< Th[i][0].y<< " "<<visU[][Vh(i,0)]<<"\n\n\n";
		}
	}

for (int i = 0; i < nSteps; i++)
{
	exec("gnuplot -p -e \"splot 'graph.txt'\"");

	cout << "t: " << (1+i)*dt << "s" << endl;

	u = uMatU * uLast;
	u += vMatU * v;

	v = uMatV * u;
	v += uMatV * uLast;
	v += vMatV * vLast;
	
	visU[] = u;
	//plot(visU,wait=debug);	

	uLast = u;
	vLast = v;

	// save the solution for Gnuplot
	{
		ofstream ff("graph.txt");
		for (int i=0;i<Th.nt;i++)
		{
			for (int j=0; j <3; j++)
			{
				ff<<Th[i][j].x << " "<< Th[i][j].y<< " "<<visU[][Vh(i,j)]<<endl;
			}
			ff<<Th[i][0].x << " "<< Th[i][0].y<< " "<<visU[][Vh(i,0)]<<"\n\n\n";
		}
	}
}

cout << "CPU time = " << clock()-cpu << endl;